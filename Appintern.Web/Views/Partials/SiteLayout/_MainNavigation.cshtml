@inherits UmbracoViewPage

@using Umbraco.Web.Models
@using Umbraco.Web.PublishedModels;
@using System;
@{
    IPublishedContent homePage = Model.Root();
    IEnumerable<IPublishedContent> navigationPages = homePage.Children(x => x.IsVisible() && (!x.HasValue("excludeFromTopNavigation") || x.Value<bool>("excludeFromTopNavigation").Equals(false)));

    var member = System.Web.Security.Membership.GetUser();
    var loggedMember = Members.GetCurrentMember();
    string memberType = "";
    string urlSlug = "";
    string baseLink = "";
    string displayUser = "";
    string displayName = "";
    if (loggedMember != null)
    {
        urlSlug = loggedMember.GetProperty("urlSlug").Value<string>();
        memberType = loggedMember.ContentType.Alias.ToString();
        baseLink = memberType.ToString().ToLower() + "s";
        displayName = Members.GetCurrentMemberProfileModel().Name;
        displayUser = displayName.Length > 10 ? @displayName.Substring(0, 10) + "..." : @displayName;
    }
}

<head>
    <title></title>
    <link href="@Url.Content("~/css/Site.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/css/login.css")" rel="stylesheet" type="text/css" />
    <!-- this nust be here, otherwise it conflicts with the accordion scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>

    <style>
        a.user:link {
            color: #494949;
            font-size: 12px;
            text-decoration: none;
        }

        a.user:visited {
            color: #494949;
            text-decoration: none;
        }

        a.user:hover {
            color: #0448af;
            font-weight: 400;
            text-decoration: none;
        }
        /*ugly hack for blue background issue*/
        .dropdown-menu > .active > a {
            background-image: none;
            background-color: whitesmoke;
        }
    </style>
</head>

<nav class="navbar navbar-default navbar-fixed-top navigation-clean">
    <div class="container">
        <div class="navbar-header">
            <a href="~/" class="navbar-left"><img src="@Url.Content("~/Images/site-logo-home.png")" height="36" width="36" style="margin-top:6px"></a>
            <a class="navbar-brand" href="~/" style="font-size:20px;margin-left:2px;color:#055ada">AppInterN</a>
            <button class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navcol-1"><span class="sr-only">Toggle navigation</span><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button>
        </div>
        <div class="collapse navbar-collapse" id="navcol-1">
            @if (navigationPages != null && navigationPages.Count() > 0)
            {
                <span style="float:right;margin-left:4px"><a class="btnlogin btn-pink" href="~/signup">Sign Up</a></span>
                <span style="float:right;margin-left:10px"><a class="btnlogin btn-primary" href="~/login">Login</a></span>
                if (member != null && Umbraco.MemberIsLoggedOn())
                {
                    <span style="float:right;margin-left:20px;margin-top:10px">
                        <strong><i class="fa fa-user-circle-o" aria-hidden="true"></i></strong>
                        <a class="user" href="~/@baseLink/@urlSlug" title="View profile for @displayName">@member.UserName</a>
                    </span>
                }
                <ul class="nav navbar-nav navbar-right" style="font-size:14px">
                    @RenderChildren(navigationPages)
                </ul>
            }
        </div>
    </div>
</nav>

@helper RenderChildren(IEnumerable<IPublishedContent> navigationPages)
{
    foreach (IPublishedContent item in navigationPages)
    {
        if (item.ContentType.Alias == "prettyLink")
        {
            @RenderPrettyLink(item)
        }
        else
        {
            @RenderPageLink(item)
        }
    }
}

@helper RenderPrettyLink(IPublishedContent item)
{
    var links = item.Value<IEnumerable<Link>>("linkTarget");
    Link prettyLink = null;
    bool isActive = Model.Id == item.Id;

    if (links != null && links.Count() > 0)
    {
        prettyLink = links.FirstOrDefault();
    }

    if (prettyLink != null)
    {
        if (!item.Value<bool>("disableDropdown") && item.Children != null && item.Children.Where(x => x.IsVisible()).Any())
        {
            IEnumerable<IPublishedContent> childItems = item.Children.Where(x => x.IsVisible());
            bool textOnly = item.Value<bool>("textOnlyInNavigation");
                <li class="dropdown">
                    <a class="dropdown-toggle @(textOnly ? "textonly" : null) @(Umbraco.AssignedContentItem.Url() == item.Url() ? "active" : null) navlink" data-toggle="dropdown" aria-expanded="false" href="@prettyLink.Url">@prettyLink.Name <span class="caret"></span></a>
                    <ul class="dropdown-menu" role="menu">
                        @RenderChildren(childItems)
                    </ul>
                </li>
            }
            else
            {
                <li role="presentation">
                    <a class="@(Umbraco.AssignedContentItem.Url() == item.Url() ? "active" : null) navlink" href="@prettyLink.Url" target="@prettyLink.Target">@prettyLink.Name</a>

                </li>
            }

        }
}

@helper RenderPageLink(IPublishedContent item)
{
    bool isActive = Model.Id == item.Id;

    if (!item.Value<bool>("disableDropdown") && item.Children != null && item.Children.Where(x => x.IsVisible()).Any())
    {
        IEnumerable<IPublishedContent> childItems = item.Children.Where(x => x.IsVisible());
        bool textOnly = item.Value<bool>("textOnlyInNavigation");
        <li class="dropdown">
            <a class="dropdown-toggle @(textOnly ? "textonly" : null) @(Umbraco.AssignedContentItem.Url() == item.Url() ? "active" : null) navlink" data-toggle="dropdown" aria-expanded="false" href="@item.Url()">@item.Name <span class="caret"></span></a>
            <ul class="dropdown-menu" role="menu">
                @RenderChildren(childItems)
            </ul>
        </li>
    }
    else
    {
        <li role="presentation" class="@(isActive ? "active" : null)">
            <a class="@(Umbraco.AssignedContentItem.Url() == item.Url() ? "active" : null) navlink" href="@item.Url()">@item.Name</a>

        </li>
    }
}

<script type="text/javascript">

    function getLoginPage() {
            $.ajax({
            url: '@Url.Action("RenderLogin", "User")',
            type: 'GET',
            data: '',
            contentType: 'application/json; charset=utf-8',
            success: function () {
            },
            error: function () {
                alert("Error accessing requested page.");
            }
        });
    }

    function getSignUpPage() {
            $.ajax({
            url: '@Url.Action("RenderSignup", "User")',
            type: 'GET',
            data: '',
            contentType: 'application/json; charset=utf-8',
            success: function () {
            },
            error: function () {
                alert("Error accessing requested page.");
            }
        });
    }

</script>