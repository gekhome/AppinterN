@inherits UmbracoViewPage<Appintern.Web.ViewModels.SignUpModel>

@using Umbraco.Web
@using Umbraco.Web.Mvc
@using System.Web.Mvc


<div class="container">
    @{
        if (!Umbraco.MemberIsLoggedOn())
        {
            using (Html.BeginUmbracoForm("SubmitSignUp", "User", FormMethod.Post, new { id = "login" }))
            {
                @Html.AntiForgeryToken()

                @RenderSignUpForm()

                if (!ViewData.ModelState.IsValid)
                {
                    <div class="alert alert-danger alert-dismissible" role="alert">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <strong>@Html.ValidationSummary()</strong>
                    </div>
                }
            }
        }
        else
        {
            Html.RenderAction("RenderLogout", "User");
        }
    }
</div>

@helper RenderSignUpForm()
{
    <div id="user-login">
        <div class="form-header" style="margin-bottom:20px">
            <img src="@Url.Content("~/Images/user-circle-gray.png")" width="100" height="70" style="margin:10px 20px 10px 10px" />
            <font class="form-title">New member sign up</font>
            @*<hr class="form-line" />*@
        </div>
        <div class="col-md-12">
            @Html.LabelFor(m => m.Name, new { @class = "control-label col-md-8" })
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control", placeholder = "Full name" })
            @Html.ValidationMessageFor(m => m.Name)
        </div>
        <div class="col-md-12">
            @Html.LabelFor(m => m.Email, new { @class = "control-label col-md-3" })
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "Email" })
            @Html.ValidationMessageFor(m => m.Email)
        </div>

        <div class="col-md-12">
            @Html.LabelFor(m => m.Username, new { @class = "control-label col-md-3" })
            @Html.TextBoxFor(m => m.Username, new { @class = "form-control", placeholder = "Username" })
            @Html.ValidationMessageFor(m => m.Username)
        </div>
        <div class="col-md-12">
            @Html.LabelFor(m => m.Password, new { @class = "control-label col-md-3" })
            @Html.PasswordFor(m => m.Password, new { @class = "form-control", placeholder = "Password" })
            @Html.ValidationMessageFor(m => m.Password)
        </div>
        <div class="col-md-12">
            @Html.LabelFor(m => m.ConfirmPassword, new { @class = "control-label col-md-3" })
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", placeholder = "Confirm password" })
            @Html.ValidationMessageFor(m => m.ConfirmPassword)
        </div>
        <div class="col-md-12">
            @Html.LabelFor(m => m.MemberCategory, new { @class = "control-label col-md-3" })
            @Html.DropDownListFor(m => m.MemberCategory, Model.MemberCategories, "Select your category...", new { @class = "form-control", style = "font-size:16px;min-width:200px;padding:2px" })
        </div>

        <div class="form-group">
            <button class="btn btn-primary" name="login" type="submit">submit </button>
            <button class="btn btn-success" type="reset" onclick="refreshPage()">reset </button>
        </div>
    </div>
}

<script type="text/javascript">
    function refreshPage() {
        window.location.reload(true);
    }
</script>
