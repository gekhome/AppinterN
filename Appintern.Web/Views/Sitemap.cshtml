@inherits UmbracoViewPage<ContentModels.Sitemap>

@using Umbraco.Web.Mvc;
@using ContentModels = Umbraco.Web.PublishedModels;
@using ClientDependency.Core.Mvc

@using System.Collections;
@using System.Linq;
@{
    Layout = "master.cshtml";
    string mainImageUrl = Model.Value<IPublishedContent>("mainImage")?.GetCropUrl(945, 400) ?? "";
    var homePage = Model.AncestorOrSelf<Home>();
    Html.RequiresCss(Url.Content("~/css/Article-Clean.css"));
}

@Html.RenderCssHere()

<style>
    .dropdown-menu > .active > a {
        background-image: none;
        background-color: whitesmoke;
    }

    ul.sitemap {
        list-style-type: none;
    }
</style>

<div class="article-clean">
    <div class="container">
        <div class="row">
            <div class="col-lg-10 col-lg-offset-1 col-md-12">
                <div class="intro">
                    <h1 class="text-center">@(Model.HasValue("title") ? Model.Value<string>("title") : Model.Name)</h1>
                    @if (!string.IsNullOrEmpty(mainImageUrl))
                    {
                        <img class="img-responsive" src="@(mainImageUrl)">
                    }
                </div>
                @if (Model.HasValue("description"))
                {
                    <h4 class="text-center">Description</h4>
                    <p class="text-center" style="align-content:center">
                        @Html.Raw(Model.Value("description"))
                    </p>
                }
                <div class="text" style="font-size:14px;font-family:Tahoma">
                    @if (homePage.Children.Where(p => p.IsVisible()).Any())
                    {
                        var childPages = homePage.Children.Where(p => p.IsVisible());

                        <ul>
                            <li class="home sitemap" style="font-size:1.1em">
                                <i class="fa fa-home" aria-hidden="true"></i>&nbsp;
                                <a href="/">@homePage.Name</a>
                                @RenderChildPages(childPages)
                            </li>
                        </ul>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@helper RenderChildPages(IEnumerable<IPublishedContent> pages)
{
    if (pages.Any())
    {
        <ul>
            @foreach (var page in pages.Where(p => p.IsVisible()))
            {
                if (!(page.HasProperty("excludeFromSitemap") && (bool)page.GetProperty("excludeFromSitemap").GetValue()))
                {
                    <li>
                        <i class="fa fa-arrow-circle-right" aria-hidden="true"></i>&nbsp;
                        <a href="@page.Url()">@page.Name</a>
                        @{
                            var childPages = page.Children.Where(p => p.IsVisible());
                            @RenderChildPages(childPages)
                        }
                    </li>
                }
            }
        </ul>
    }
}