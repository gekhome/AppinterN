
@using Appintern.Web.ViewModels

@{
    ViewBag.Title = "VET Students";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="page-header" style="margin:5px 30px 5px 30px">
    <span style="margin:5px 30px 5px 30px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
        <font style="color:#494949;float:left;font-family:'Segoe UI'">VET Students Data</font>
    </span>
    <span style="margin:5px 30px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">
        @Html.ActionLink("Return to Dashboard", "RenderDashboardHome", "Backend", null, new { @class = "btn btn-warning", style = "font-size:14px" })
    </span>
    <button class="btn btn-info" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrid()">Refresh</button>
    <button class="btn btn-primary" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="populateStudents()">Populate Students</button>
</div>

<div class="body-content" style="margin:20px 30px 5px 30px;">
    @(Html.Kendo().Grid<StudentsViewModel>()
        .Name("Grid")
        .Columns(columns =>
        {
            columns.Bound(c => c.MemberID).Width(15).Filterable(false);
            columns.Bound(c => c.FullName).Width(30).Groupable(false);
            columns.Bound(c => c.Phone).Width(20).Groupable(false);
            columns.Bound(c => c.Email).Width(20).Groupable(false);
            columns.Bound(c => c.Country).Width(20);
            columns.Bound(c => c.JobSector).Width(30).Title("Job Sector");
            columns.Bound(c => c.School).Width(30);
            columns.Bound(c => c.Specialty).Width(30);
        })
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Filterable()
        .Groupable()
        .HtmlAttributes(new { style = "display: block;font-size:13px" })
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Scrollable(scr => scr.Height(540))
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(20)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(p => p.MemberID);
        })
        .Read(read => read.Action("StudentsMain_Read", "Backend"))
        .Events(events => events.Error("error_handler"))
        )
        )
</div>


<script type="text/javascript">

    function populateStudents() {
        $.ajax({
        url: '@Url.Action("PopulateStudents", "Backend")',
        type: 'GET',
        data: "",
        contentType: 'application/json; charset=utf-8',
        success: function (data) {
            if (data != "") alert(data);
            $("#Grid").data("kendoGrid").dataSource.read();
        },
        error: function () {
            alert("Error retrieving data. Try again later.");
        }
        });
    }


    function RefreshGrid(e) {
        var grid = $("#Grid").data("kendoGrid");
        grid.dataSource.read();
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
        $("#Grid").data("kendoGrid").dataSource.read();
    }

</script>